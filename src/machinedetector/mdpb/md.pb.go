// Code generated by protoc-gen-go.
// source: md.proto
// DO NOT EDIT!

/*
Package mdpb is a generated protocol buffer package.

It is generated from these files:
	md.proto

It has these top-level messages:
	Conf
	RemoteConf
	StringVec
*/
package mdpb

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Conf struct {
	MasterRedis       *string `protobuf:"bytes,1,opt,name=masterRedis" json:"masterRedis,omitempty"`
	BackupRedis       *string `protobuf:"bytes,2,opt,name=backupRedis" json:"backupRedis,omitempty"`
	RedisPort         *int32  `protobuf:"varint,3,opt,name=redisPort" json:"redisPort,omitempty"`
	RedisConnTimeOut  *int32  `protobuf:"varint,4,opt,name=redisConnTimeOut" json:"redisConnTimeOut,omitempty"`
	RedisSockTimeOut  *int32  `protobuf:"varint,5,opt,name=redisSockTimeOut" json:"redisSockTimeOut,omitempty"`
	RedisDatabase     *string `protobuf:"bytes,6,opt,name=redisDatabase" json:"redisDatabase,omitempty"`
	RedisPasswd       *string `protobuf:"bytes,7,opt,name=redisPasswd" json:"redisPasswd,omitempty"`
	StatusPort        *int32  `protobuf:"varint,9,opt,name=statusPort" json:"statusPort,omitempty"`
	MtItemPeriod      *int32  `protobuf:"varint,10,opt,name=mtItemPeriod" json:"mtItemPeriod,omitempty"`
	MasterMemcached   *string `protobuf:"bytes,11,opt,name=masterMemcached" json:"masterMemcached,omitempty"`
	SlaveMemcached    *string `protobuf:"bytes,12,opt,name=slaveMemcached" json:"slaveMemcached,omitempty"`
	CacheRetryTimeout *int32  `protobuf:"varint,13,opt,name=cacheRetryTimeout" json:"cacheRetryTimeout,omitempty"`
	CacheConnTimeout  *int32  `protobuf:"varint,14,opt,name=cacheConnTimeout" json:"cacheConnTimeout,omitempty"`
	LogLiveTime       *int64  `protobuf:"varint,15,opt,name=logLiveTime" json:"logLiveTime,omitempty"`
	DbHosts           *string `protobuf:"bytes,16,opt" json:"DbHosts,omitempty"`
	DbPort            *int32  `protobuf:"varint,17,opt" json:"DbPort,omitempty"`
	DbName            *string `protobuf:"bytes,18,opt" json:"DbName,omitempty"`
	DbUser            *string `protobuf:"bytes,19,opt" json:"DbUser,omitempty"`
	DbPass            *string `protobuf:"bytes,20,opt" json:"DbPass,omitempty"`
	DbCharSet         *string `protobuf:"bytes,21,opt" json:"DbCharSet,omitempty"`
	DbRTimeOut        *int32  `protobuf:"varint,22,opt" json:"DbRTimeOut,omitempty"`
	DbWTimeOut        *int32  `protobuf:"varint,23,opt" json:"DbWTimeOut,omitempty"`
	DbCTimeOut        *int32  `protobuf:"varint,24,opt" json:"DbCTimeOut,omitempty"`
	DbMinConn         *int32  `protobuf:"varint,25,opt" json:"DbMinConn,omitempty"`
	DbMaxConn         *int32  `protobuf:"varint,26,opt" json:"DbMaxConn,omitempty"`
	DbRetryTimes      *int32  `protobuf:"varint,27,opt" json:"DbRetryTimes,omitempty"`
	DbRetryIntval     *int32  `protobuf:"varint,28,opt" json:"DbRetryIntval,omitempty"`
	RemoteConf        *string `protobuf:"bytes,73,opt,name=remoteConf" json:"remoteConf,omitempty"`
	EnableRemoteConf  *int32  `protobuf:"varint,74,opt,name=enableRemoteConf" json:"enableRemoteConf,omitempty"`
	SshTimeOutMs      *int32  `protobuf:"varint,80,opt,name=sshTimeOutMs" json:"sshTimeOutMs,omitempty"`
	PingTimeOutMs     *int32  `protobuf:"varint,81,opt,name=pingTimeOutMs" json:"pingTimeOutMs,omitempty"`
	ConCurrency       *int32  `protobuf:"varint,82,opt,name=conCurrency" json:"conCurrency,omitempty"`
	LogDir            *string `protobuf:"bytes,83,opt,name=logDir" json:"logDir,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *Conf) Reset()         { *m = Conf{} }
func (m *Conf) String() string { return proto.CompactTextString(m) }
func (*Conf) ProtoMessage()    {}

func (m *Conf) GetMasterRedis() string {
	if m != nil && m.MasterRedis != nil {
		return *m.MasterRedis
	}
	return ""
}

func (m *Conf) GetBackupRedis() string {
	if m != nil && m.BackupRedis != nil {
		return *m.BackupRedis
	}
	return ""
}

func (m *Conf) GetRedisPort() int32 {
	if m != nil && m.RedisPort != nil {
		return *m.RedisPort
	}
	return 0
}

func (m *Conf) GetRedisConnTimeOut() int32 {
	if m != nil && m.RedisConnTimeOut != nil {
		return *m.RedisConnTimeOut
	}
	return 0
}

func (m *Conf) GetRedisSockTimeOut() int32 {
	if m != nil && m.RedisSockTimeOut != nil {
		return *m.RedisSockTimeOut
	}
	return 0
}

func (m *Conf) GetRedisDatabase() string {
	if m != nil && m.RedisDatabase != nil {
		return *m.RedisDatabase
	}
	return ""
}

func (m *Conf) GetRedisPasswd() string {
	if m != nil && m.RedisPasswd != nil {
		return *m.RedisPasswd
	}
	return ""
}

func (m *Conf) GetStatusPort() int32 {
	if m != nil && m.StatusPort != nil {
		return *m.StatusPort
	}
	return 0
}

func (m *Conf) GetMtItemPeriod() int32 {
	if m != nil && m.MtItemPeriod != nil {
		return *m.MtItemPeriod
	}
	return 0
}

func (m *Conf) GetMasterMemcached() string {
	if m != nil && m.MasterMemcached != nil {
		return *m.MasterMemcached
	}
	return ""
}

func (m *Conf) GetSlaveMemcached() string {
	if m != nil && m.SlaveMemcached != nil {
		return *m.SlaveMemcached
	}
	return ""
}

func (m *Conf) GetCacheRetryTimeout() int32 {
	if m != nil && m.CacheRetryTimeout != nil {
		return *m.CacheRetryTimeout
	}
	return 0
}

func (m *Conf) GetCacheConnTimeout() int32 {
	if m != nil && m.CacheConnTimeout != nil {
		return *m.CacheConnTimeout
	}
	return 0
}

func (m *Conf) GetLogLiveTime() int64 {
	if m != nil && m.LogLiveTime != nil {
		return *m.LogLiveTime
	}
	return 0
}

func (m *Conf) GetDbHosts() string {
	if m != nil && m.DbHosts != nil {
		return *m.DbHosts
	}
	return ""
}

func (m *Conf) GetDbPort() int32 {
	if m != nil && m.DbPort != nil {
		return *m.DbPort
	}
	return 0
}

func (m *Conf) GetDbName() string {
	if m != nil && m.DbName != nil {
		return *m.DbName
	}
	return ""
}

func (m *Conf) GetDbUser() string {
	if m != nil && m.DbUser != nil {
		return *m.DbUser
	}
	return ""
}

func (m *Conf) GetDbPass() string {
	if m != nil && m.DbPass != nil {
		return *m.DbPass
	}
	return ""
}

func (m *Conf) GetDbCharSet() string {
	if m != nil && m.DbCharSet != nil {
		return *m.DbCharSet
	}
	return ""
}

func (m *Conf) GetDbRTimeOut() int32 {
	if m != nil && m.DbRTimeOut != nil {
		return *m.DbRTimeOut
	}
	return 0
}

func (m *Conf) GetDbWTimeOut() int32 {
	if m != nil && m.DbWTimeOut != nil {
		return *m.DbWTimeOut
	}
	return 0
}

func (m *Conf) GetDbCTimeOut() int32 {
	if m != nil && m.DbCTimeOut != nil {
		return *m.DbCTimeOut
	}
	return 0
}

func (m *Conf) GetDbMinConn() int32 {
	if m != nil && m.DbMinConn != nil {
		return *m.DbMinConn
	}
	return 0
}

func (m *Conf) GetDbMaxConn() int32 {
	if m != nil && m.DbMaxConn != nil {
		return *m.DbMaxConn
	}
	return 0
}

func (m *Conf) GetDbRetryTimes() int32 {
	if m != nil && m.DbRetryTimes != nil {
		return *m.DbRetryTimes
	}
	return 0
}

func (m *Conf) GetDbRetryIntval() int32 {
	if m != nil && m.DbRetryIntval != nil {
		return *m.DbRetryIntval
	}
	return 0
}

func (m *Conf) GetRemoteConf() string {
	if m != nil && m.RemoteConf != nil {
		return *m.RemoteConf
	}
	return ""
}

func (m *Conf) GetEnableRemoteConf() int32 {
	if m != nil && m.EnableRemoteConf != nil {
		return *m.EnableRemoteConf
	}
	return 0
}

func (m *Conf) GetSshTimeOutMs() int32 {
	if m != nil && m.SshTimeOutMs != nil {
		return *m.SshTimeOutMs
	}
	return 0
}

func (m *Conf) GetPingTimeOutMs() int32 {
	if m != nil && m.PingTimeOutMs != nil {
		return *m.PingTimeOutMs
	}
	return 0
}

func (m *Conf) GetConCurrency() int32 {
	if m != nil && m.ConCurrency != nil {
		return *m.ConCurrency
	}
	return 0
}

func (m *Conf) GetLogDir() string {
	if m != nil && m.LogDir != nil {
		return *m.LogDir
	}
	return ""
}

type RemoteConf struct {
	RedisHost        *string `protobuf:"bytes,1,opt,name=redisHost" json:"redisHost,omitempty"`
	RedisPort        *int32  `protobuf:"varint,2,opt,name=redisPort" json:"redisPort,omitempty"`
	RedisPasswd      *string `protobuf:"bytes,3,opt,name=redisPasswd" json:"redisPasswd,omitempty"`
	BackupRedis      *string `protobuf:"bytes,4,opt,name=backupRedis" json:"backupRedis,omitempty"`
	MasterMemcached  *string `protobuf:"bytes,6,opt,name=masterMemcached" json:"masterMemcached,omitempty"`
	SlaveMemcached   *string `protobuf:"bytes,7,opt,name=slaveMemcached" json:"slaveMemcached,omitempty"`
	DbHost           *string `protobuf:"bytes,11,opt" json:"DbHost,omitempty"`
	DbPort           *int32  `protobuf:"varint,12,opt" json:"DbPort,omitempty"`
	DbName           *string `protobuf:"bytes,13,opt" json:"DbName,omitempty"`
	DbUser           *string `protobuf:"bytes,14,opt" json:"DbUser,omitempty"`
	DbPass           *string `protobuf:"bytes,15,opt" json:"DbPass,omitempty"`
	DbVip1           *string `protobuf:"bytes,16,opt" json:"DbVip1,omitempty"`
	DbVip2           *string `protobuf:"bytes,17,opt" json:"DbVip2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RemoteConf) Reset()         { *m = RemoteConf{} }
func (m *RemoteConf) String() string { return proto.CompactTextString(m) }
func (*RemoteConf) ProtoMessage()    {}

func (m *RemoteConf) GetRedisHost() string {
	if m != nil && m.RedisHost != nil {
		return *m.RedisHost
	}
	return ""
}

func (m *RemoteConf) GetRedisPort() int32 {
	if m != nil && m.RedisPort != nil {
		return *m.RedisPort
	}
	return 0
}

func (m *RemoteConf) GetRedisPasswd() string {
	if m != nil && m.RedisPasswd != nil {
		return *m.RedisPasswd
	}
	return ""
}

func (m *RemoteConf) GetBackupRedis() string {
	if m != nil && m.BackupRedis != nil {
		return *m.BackupRedis
	}
	return ""
}

func (m *RemoteConf) GetMasterMemcached() string {
	if m != nil && m.MasterMemcached != nil {
		return *m.MasterMemcached
	}
	return ""
}

func (m *RemoteConf) GetSlaveMemcached() string {
	if m != nil && m.SlaveMemcached != nil {
		return *m.SlaveMemcached
	}
	return ""
}

func (m *RemoteConf) GetDbHost() string {
	if m != nil && m.DbHost != nil {
		return *m.DbHost
	}
	return ""
}

func (m *RemoteConf) GetDbPort() int32 {
	if m != nil && m.DbPort != nil {
		return *m.DbPort
	}
	return 0
}

func (m *RemoteConf) GetDbName() string {
	if m != nil && m.DbName != nil {
		return *m.DbName
	}
	return ""
}

func (m *RemoteConf) GetDbUser() string {
	if m != nil && m.DbUser != nil {
		return *m.DbUser
	}
	return ""
}

func (m *RemoteConf) GetDbPass() string {
	if m != nil && m.DbPass != nil {
		return *m.DbPass
	}
	return ""
}

func (m *RemoteConf) GetDbVip1() string {
	if m != nil && m.DbVip1 != nil {
		return *m.DbVip1
	}
	return ""
}

func (m *RemoteConf) GetDbVip2() string {
	if m != nil && m.DbVip2 != nil {
		return *m.DbVip2
	}
	return ""
}

type StringVec struct {
	Strs             []string `protobuf:"bytes,1,rep,name=strs" json:"strs,omitempty"`
	Millisec         *int64   `protobuf:"varint,2,opt,name=millisec" json:"millisec,omitempty"`
	DbHost           *string  `protobuf:"bytes,11,opt" json:"DbHost,omitempty"`
	DbPort           *int32   `protobuf:"varint,12,opt" json:"DbPort,omitempty"`
	DbName           *string  `protobuf:"bytes,13,opt" json:"DbName,omitempty"`
	DbUser           *string  `protobuf:"bytes,14,opt" json:"DbUser,omitempty"`
	DbPass           *string  `protobuf:"bytes,15,opt" json:"DbPass,omitempty"`
	Localhost        *string  `protobuf:"bytes,16,opt,name=localhost" json:"localhost,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StringVec) Reset()         { *m = StringVec{} }
func (m *StringVec) String() string { return proto.CompactTextString(m) }
func (*StringVec) ProtoMessage()    {}

func (m *StringVec) GetStrs() []string {
	if m != nil {
		return m.Strs
	}
	return nil
}

func (m *StringVec) GetMillisec() int64 {
	if m != nil && m.Millisec != nil {
		return *m.Millisec
	}
	return 0
}

func (m *StringVec) GetDbHost() string {
	if m != nil && m.DbHost != nil {
		return *m.DbHost
	}
	return ""
}

func (m *StringVec) GetDbPort() int32 {
	if m != nil && m.DbPort != nil {
		return *m.DbPort
	}
	return 0
}

func (m *StringVec) GetDbName() string {
	if m != nil && m.DbName != nil {
		return *m.DbName
	}
	return ""
}

func (m *StringVec) GetDbUser() string {
	if m != nil && m.DbUser != nil {
		return *m.DbUser
	}
	return ""
}

func (m *StringVec) GetDbPass() string {
	if m != nil && m.DbPass != nil {
		return *m.DbPass
	}
	return ""
}

func (m *StringVec) GetLocalhost() string {
	if m != nil && m.Localhost != nil {
		return *m.Localhost
	}
	return ""
}

func init() {
}
